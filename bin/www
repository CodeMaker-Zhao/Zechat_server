#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var axios = require('axios')
var MessageModel = require('../db/db').MessageModel;
var UserModel = require('../db/db').UserModel;
var fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const name_id_obj = {};
io.on('connection', (socket) => {
  socket.on('username', username => {
    console.log('connect ' + username + Date.now());
    name_id_obj[username] = socket.id;
    MessageModel.find({ "date": { $gt: Date.now() - 1000 * 60 * 60 }, $or: [{ "to": username }, { "to": "public" }, { "from": username }] }, (err, data) => {
      if (data.length == 0) {
        return;
      } else {
        io.to(socket.id).emit('chat', JSON.stringify(data));
      }
    })
    console.log(name_id_obj);
    io.emit('updateOnlineList', name_id_obj);
  })
  socket.on('searchExpression', async keywords => {
    let res = await axios({
      method: 'get',
      url: `https://pic.sogou.com/pics/json.jsp?query=${encodeURIComponent(
        `${keywords} 表情`,
      )}&st=5&start=0&xml_len=60&callback=callback&reqFrom=wap_result&`,
      headers: {
        accept: '*/*',
        'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7',
        'cache-control': 'no-cache',
        pragma: 'no-cache',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        referrer: `https://pic.sogou.com/pic/emo/searchList.jsp?statref=search_form&uID=hTHHybkSPt37C46z&spver=0&rcer=&keyword=${encodeURIComponent(
          keywords,
        )}`,
        referrerPolicy: 'no-referrer-when-downgrade',
        'user-agent':
          'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',
      },
    });
    try {
      const parseDataResult = res.data.match(/callback\((.+)\)/);
      const data = JSON.parse(`${parseDataResult[1]}`);
      const image = data.items.map(({ locImageLink, width, height }) => ({
        image: locImageLink,
        width,
        height,
      }));
      io.to(socket.id).emit('searchExp', image);
    } catch {
      io.to(socket.id).emit('searchExp', '发生未知错误');
    }
  })
  socket.on('disconnect', () => {
    console.log('user disconnected');
    let id = socket.id;
    let username = '';
    for (const key in name_id_obj) {
      const value = name_id_obj[key];
      if (value === id) {
        username = key;
        break;
      }
    }
    name_id_obj[username] = null;
    console.log('disconnect', name_id_obj);
    io.emit('updateOnlineList', name_id_obj);
  })
  socket.on('add_concat', (msg) => {
    let msgObj = JSON.parse(msg);
    let { from, to } = msgObj;
    UserModel.findOneAndUpdate({ username: to }, { $push: { friendList: from } }, (err, user) => {
      console.log(user);
    })
    UserModel.findOneAndUpdate({ username: from }, { $push: { friendList: to } }, (err, user) => {
      console.log(user);
    })
    io.to(socket.id).emit('add_concat', to);
    io.to(name_id_obj[to]).emit('add_concat', from);
  })
  socket.on('chat', (message) => {
    let msg = JSON.parse(message);
    msg = Object.assign(msg, {
      date: Date.now()
    })
    if (msg.to === 'public') {
      new MessageModel({ ...msg }).save(function (err, data) {
        io.emit('chat', JSON.stringify(data));
      })
    } else {
      new MessageModel({ ...msg }).save(function (err, data) {
        io.to(name_id_obj[msg.to]).emit('chat', JSON.stringify(data));
        io.to(socket.id).emit('chat', JSON.stringify(data));
      })
    }
  })
  socket.on('uploadImg', (file) => {
    const data = file.file;
    const name = file.name;
    var imageName = 'public/images/'+name;
    fs.createWriteStream(imageName).write(data)
  })
  socket.on('uploadFile',(file)=>{
    const data = file.file;
    const name = file.name;
    var fileName = 'public/file/'+name;
    fs.createWriteStream(fileName).write(data);
  })
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
